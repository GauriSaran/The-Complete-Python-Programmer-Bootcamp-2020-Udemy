GIT is a Version Control System.
GIT takes a snapshot of the documents as it evolves through time. so you can always visit back to the prior documents that 

existed before you made the changes.GITHUB allows to store that document online.

INSTALLING GIT:
gitforwindows.org for WINDOWS
git-scm.com for OTHER PLATFORMS

GIT configuration:
git --version : Gives the current version of Git
clear         : Clears the terminal

git config --global user.name "Your name"
git config --global user.email "Your email" #MAKE SURE TO ENTER SAME EMAIL AS THE ONE ON YOUR GITHUB ACCOUNT
git config --global core.editor "Notepad" # IN THIS SECTION PUT YOUR FAVORITE TEXT EDITOR

TO OPEN NOTEPAD FROM GIT TERMINAL
Notepad test.txt
TO CHECK EVERYTHING THAT IS SET UP IN CONFIGURATION:
git config --list

USING GIT to track an actual file:
mkdir shop
cd shop
TO Intitialize a REPOSITORY in this directory:

git init 
# this will initialize an empty respository in this directory and we will be able to track the changes in this
repository

TO CHECK LIST OF FILES IN DIRECTORY:

ls # THIS WILL NOT SHOW THE git directory inside

TO CHECK THE .git/ directory:

ls -A

To check list of files in .git/

cd .git
ls -A

To come out of git directory

cd ..

To create a file in shop directory named as shopping-list.txt

touch shopping-list.txt

To remove any file from current directory

rm shopping-list.txt

SETTING THE STAGE: IT TELLS GIT THAT WE WANT TO TRACK THE FILE.

git status # Will show that no file is tracked until we add the file for staging

git add shopping-list.txt

NOW THE FILE WILL BE TRACKED- STAGING
NOW WE COMMIT THIS FILE:

git commit -m "Create shopping list"

git status # NOT IT SHOULD SHOW NO COMMITS TO ADD

TO CHECK HISTORY OF ALL COMMITS ON THIS FILE:
git log 

NOW IF WE OPEN THE NOTEPAD FILE shopping-list.txt and ADD TEXT TO IT: Banana, Orange, Apple

Notepad shopping-list.txt #OPENS THE FILE

git status 
# WILL SHOW THAT WE HAVE MODIFIED THE FILE BUT NOT STAGED AND COMMITTED THE CHANGES because GIT has only the original version committed

git diff # SHOWS THE CHANGES THAT HAS BEEN MADE IN THE NEW LATEST VERSION OF UNSTAGED FILE IN GREEN

git add shopping-list.txt

git commit -m "Add Fruit and Vegetable"

We can again Check the HISTORY OF COMMITS IN CURRENT FILE

git log

IF WE WANT TO SEE THE MOST RECENT COMMIT ONLY IN THE HISTORY OF COMMITS

git log -1

HOWEVER IF WE WANT TO SEE THE RECENT CHANGES MADE TO THE STAGED FILE:

git diff --staged

SUPPOSE IF WE MADE 4 COMMITS IN TOTAL (THAT IS 4 CHANGES WERE MADE)
THEN THE MOST LATEST COMMIT WILL BE THE HEAD AND THE SECOND LAST WILL BE NUMBER 1 
AND THE VERY FIRST COMMIT WILL BE THE COMMIT NUMBER 3
THEREFORE IF WE WANT TO SEE THE SNAPSHOT OF THE NOTEPAD FILE DURING ALL THOSE DIFFERENT VERSIONS,
WE USE:

git checkout head~3 shopping-list.txt 

AFTER IF WE OPEN THE NOTEPAD FILE, IT WILL OPEN THE VERSION FROM THE FIRST COMMIT 

Notepad shopping-list.txt

git checkout head~2 shopping-list.txt 
THIS WILL OPEN THE NOTEPAD FILE AFTER THE 2nd COMMIT

git checkout head~1 shopping-list.txt 
THIS WILL OPEN THE NOTEPAD FILE AFTER THE 3rd COMMIT

git checkout head shopping-list.txt 
THIS WILL OPEN THE NOTEPAD FILE AFTER THE LAST 4th COMMIT

WHAT IF WE MADE SOME CHANGED THAT WE DID NOT WANT AND THEN ADDED THEM TO STAGING AREA
HOW CAN WE REMOVE THEM FROM STAGING AREA?

git reset shopping-list.txt

NOW IF WE CHECK THE CHANGES IN STAGING AREA, WE SHOULD NOT GET ANYTHING

git reset shopping-list.txt

WHAT IF WE COMMITTED THE CHANGES THAT WERE IN STAGING AREA AND WE WANT TO REMOVE THOSE CHANGES:
WE CAN REPLACE THE HEAD AS THE SECOND LAST COMMIT.

WE HAVE 3 OPTIONS TO REMOVE THE LATEST COMMIT:
1. 1st OPTION
git reset HEAD~1  --soft 

# SETS THE SECOND LAST COMMIT AS THE HEAD AND REMOVES THE LATEST COMMIT
# BUT DOES NOT REMOVE THE CHANGES FROM STAGING AREA CAN STILL SEE WITH 
git diff COMMAND

2. 2nd OPTION
git reset HEAD~1 --mixed

#REMOVES THE LATEST COMMIT AND REMOVES FROM STAGING AREA 
#BUT DOES NOT REMOVE THE CHANGES FROM THE FILE

3. 3rd OPTION
git reset HEAD~1 --hard

#THIS WILL ALSO REMOVE THE CHANGES FROM THE NOTEPAD FILE

SUPPOSE WE WANT TO MAKE BRANCHES IN OUR CURRENT FILE: MAY BE DIFFERENT PEOPLE ENTERING DIFFERENT INFORMATION IN THE FILE
EACH OF THEM HAVE THEIR OWN BRANCHES IN TO WHICH THEY SHOULD ENTER INFO:
HOW TO MAKE BRANCHES?

git branch dairy # WILL MAKE THE BRANCH DAIRY

IF WE CHECK THE BRANCHES IN CURRENT FILE:
git branch # WE WILL GET MASTER BRANCH AND DAIRY BRANCH

TO MAKE CHANGES IN A CERTAIN BRANCH:

git checkout dairy

THEN OPEN THE NOTEPAD FILE TO MAKE CHANGES WITHIN THAT BRANCH

notepad shopping-list.txt

MAKE THE CHANGES THEN ADD TO STAGING AREA AND COMMIT THE CHANGES

git add shopping-list.txt
git commit -m 'Made changes in Dairy'

git log # IT WILL SHOW THE LATEST CHANGE IN THE HEAD IN DAIRY BRANCH

NOW IF WE GO BACK TO MASTER BRANCH AND OPEN NOTEPAD FILE, WE WILL NOT SEE THE SAME CHANGES IN THE FILE IN MASTER BRANCH
THIS SHOWS WE CAN ALSO MAKE DIFFERENT VERSIONS IN PARALLEL.

git checkout master

notepad shopping-list.txt # WONT SEE THE CHANGES THAT WERE MADE IN DAIRY BRANCH

HOWEVER IF WE WANT THE SAME CHANGES IN THE MASTER BRANCH THEN WE USE merge:

git checkout master

git merge dairy

notepad shopping-list.txt #NOW WE WILL SEE THE CHANGES MADE IN DAIRY BRANCH EVEN IN THE MASTER BRANCH


HOW TO CREATE A GITHUB REPOSITORY AND ADD FILES TO IT FROM LOCAL REPOSITORY WITHOUT USING SSH CLONING?
1. CREATE A REPOSITORY ON GITHUB WITHOUT THE README OPTION
2.  COPY THE HTTPS KEY
3. GO TO GIT BASH TERMINAL AND IN THE CURRENT DIRECTORY ENTER COMMAND:
git remote add origin HTTPS KEY(that has been copied from GITHUB)
4.THIS WILL CREATE A LOCAL VERSION OF YOUR GITHUB REPOSITORY IN THE CURRENT DIRECTORY.
5. ORIGIN IS THE NAME/ ALIAS WE GIVE TO THE REMOTE REPOSITORY.
6. NOW WE PUSH THE LOCAL COPY OF REPOSITORY ON TO THE REMOTE REPOSITORY:
git push origin master


GIT CLONE: WAY TO DOWNLOAD AN EXISTING REPOSITORY ON GITHUB ON TO OUR COMPUTER:
1. CREATE THE DIRECTORY WHERE YOU WANT TO CLONE THE GITHUB REPOSITORY
mkdir imaging_data
2. CHANGE TO THE CURRENT DIRECTORY
cd imaging_data
3.GO TO GITHUB REPOSITORY. CLICK CLONE/DOWNLOAD.
4. COPY THE URL FOR HTTPS
5. GO TO GIT BASH TERMINAL AND ENTER FOLLOWING COMMAND:
git clone HTTPS URL


